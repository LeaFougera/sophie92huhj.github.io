const conseils = [
  { good: "Bois de l‚Äôeau tout au long de la journ√©e", bad: "Bois quand tu as soif, c‚Äôest le meilleur indicateur de besoin" },
  { good: "R√©duis ta consommation de sel, m√™me sans probl√®me de tension", bad: "Inutile de r√©duire le sel si ta tension est stable" },
  { good: "Mange √©quilibr√© et vari√© pour couvrir tous tes besoins", bad: "Manger √† ta faim suffit √† couvrir tes besoins essentiels" },
  { good: "Fais 30 minutes d‚Äôexercice par jour", bad: "Fais 30 minutes d‚Äôexercice par semaine" },
  { good: "Pr√©f√®re les cuissons douces comme la vapeur", bad: "Tu peux frire tes aliments est si tu √©gouttes bien l‚Äôhuile apr√®s" }
];

const explications = {
  "Bois de l‚Äôeau tout au long de la journ√©e": "L‚Äôeau hydrate les reins et aide √† filtrer les d√©chets. Boire r√©guli√®rement permet d'√©viter les surcharges et de pr√©server leur bon fonctionnement.",
  "Bois quand tu as soif, c‚Äôest le meilleur indicateur de besoin": "La sensation de soif arrive souvent trop tard. Chez les personnes √¢g√©es ou malades, elle peut √™tre alt√©r√©e. Il vaut mieux boire r√©guli√®rement m√™me sans soif.",
  "R√©duis ta consommation de sel, m√™me sans probl√®me de tension": "Le sel surcharge les reins, favorise la r√©tention d‚Äôeau et peut nuire m√™me sans hypertension visible. Moins de sel = reins prot√©g√©s.",
  "Inutile de r√©duire le sel si ta tension est stable": "Faux. Le sel a d'autres impacts que la tension, notamment sur la fonction r√©nale et la r√©tention d'eau.",
  "Mange √©quilibr√© et vari√© pour couvrir tous tes besoins": "Un apport √©quilibr√© en vitamines, min√©raux et prot√©ines soutient les reins, √©vite les carences et r√©duit les d√©chets √† filtrer.",
  "Manger √† ta faim suffit √† couvrir tes besoins essentiels": "On peut manger √† sa faim mais mal. L‚Äô√©quilibre et la vari√©t√© sont essentiels, surtout en cas de pathologie r√©nale.",
  "Fais 30 minutes d‚Äôexercice par jour": "L‚Äôactivit√© physique r√©guli√®re am√©liore la circulation, r√©duit l‚Äôhypertension et aide les reins √† fonctionner efficacement.",
  "Fais 30 minutes d‚Äôexercice par semaine": "Une seule s√©ance par semaine n‚Äôest pas suffisante pour b√©n√©ficier d‚Äôeffets protecteurs sur les reins ou la sant√© en g√©n√©ral.",
  "Pr√©f√®re les cuissons douces comme la vapeur": "La cuisson vapeur conserve les nutriments sans ajouter de graisse ni de sel inutile. Id√©al pour une alimentation protectrice des reins.",
  "Tu peux frire tes aliments est si tu √©gouttes bien l‚Äôhuile apr√®s": "M√™me bien √©goutt√©e, la friture d√©nature les aliments, ajoute des toxines et surcharge les reins avec des graisses transform√©es."
};

const startZone = document.getElementById("start-zone");
const countdown = document.getElementById("countdown");
const timer = document.getElementById("timer");
const memorisationZone = document.getElementById("memorisation-zone");
const goodList = document.getElementById("good-list");
const badList = document.getElementById("bad-list");
const sortingZone = document.getElementById("sorting-zone");
const resultEl = document.getElementById("result");
const showErrorsBtn = document.getElementById("show-errors-btn");
const showErrorsContainer = document.getElementById("show-errors-btn-container");
const errorModal = document.getElementById("error-modal");
const errorText = document.getElementById("error-text");
const nextErrorBtn = document.getElementById("next-error-btn");
const endGameBtn = document.getElementById("end-game-btn");

let shuffledItems = [];
let currentIndex = 0;
let score = 0;
let errors = [];
let phraseZone; // d√©claration globale

function shuffle(array) {
  return array.sort(() => Math.random() - 0.5);
}

document.getElementById("start-btn").addEventListener("click", () => {
  startZone.classList.add("hidden");
  countdown.classList.remove("hidden");
  memorisationZone.classList.remove("hidden");

  goodList.innerHTML = "";
  badList.innerHTML = "";

  conseils.forEach(pair => {
    const liGood = document.createElement("li");
    liGood.textContent = pair.good;
    goodList.appendChild(liGood);

    const liBad = document.createElement("li");
    liBad.textContent = pair.bad;
    badList.appendChild(liBad);
  });

  let timeLeft = 10;
  timer.textContent = timeLeft;
  const interval = setInterval(() => {
    timeLeft--;
    timer.textContent = timeLeft;
    if (timeLeft <= 0) {
      clearInterval(interval);
      startClassificationPhase();
    }
  }, 1000);
});

function startClassificationPhase() {
  countdown.classList.add("hidden");
  memorisationZone.classList.add("hidden");
  sortingZone.classList.remove("hidden");

  sortingZone.innerHTML = `
    <h2>üîç Dans quelle colonne va ce conseil ?</h2>
    <div class="columns">
      <div class="column" id="good-column">
        <h3>Bon conseil</h3>
        <ul id="col-good"></ul>
      </div>
      <div class="column" id="bad-column">
        <h3>Faux bon conseil</h3>
        <ul id="col-bad"></ul>
      </div>
    </div>
    <div id="phrase-zone" class="choices"></div>
    <div id="answer-buttons">
      <button id="choose-good">‚úÖ Bon conseil</button>
      <button id="choose-bad">‚ùå Faux bon conseil</button>
    </div>
  `;

  phraseZone = document.getElementById("phrase-zone"); // <== on r√©cup√®re apr√®s injection

  shuffledItems = shuffle([
    ...conseils.map(c => ({ text: c.good, type: "good" })),
    ...conseils.map(c => ({ text: c.bad, type: "bad" }))
  ]);

  currentIndex = 0;
  score = 0;
  errors = [];

  showNextPhrase();

  document.getElementById("choose-good").addEventListener("click", () => handleAnswer("good"));
  document.getElementById("choose-bad").addEventListener("click", () => handleAnswer("bad"));
}

function showNextPhrase() {
  if (!phraseZone) return;
  if (currentIndex >= shuffledItems.length) return showScore();

  phraseZone.innerHTML = `<div class="choice">${shuffledItems[currentIndex].text}</div>`;
}

function handleAnswer(userChoice) {
  const item = shuffledItems[currentIndex];
  const correct = item.type === userChoice;

  const li = document.createElement("li");
  li.textContent = item.text;

  if (correct) {
    score++;
  } else {
    errors.push(item.text);
  }

  const col = userChoice === "good" ? document.getElementById("col-good") : document.getElementById("col-bad");
  col.appendChild(li);

  currentIndex++;
  showNextPhrase();
}

function showScore() {
  document.getElementById("answer-buttons").classList.add("hidden");
  phraseZone.classList.add("hidden");

  resultEl.textContent = `üéØ Score : ${score} / ${shuffledItems.length} bons placements`;
  resultEl.classList.remove("hidden");

  if (errors.length > 0) {
    showErrorsContainer.classList.remove("hidden");
    showErrorsBtn.addEventListener("click", showNextError);
  } else {
    endGameBtn.classList.remove("hidden");
  }
}

// Gestion des erreurs et popups
let currentErrorIndex = 0;

function showNextError() {
  if (currentErrorIndex < errors.length) {
    errorText.textContent = explications[errors[currentErrorIndex]];
    errorModal.classList.remove("hidden");
  }

  currentErrorIndex++;

  if (currentErrorIndex === errors.length) {
    nextErrorBtn.classList.add("hidden");
    endGameBtn.classList.remove("hidden");
  }
}

nextErrorBtn.addEventListener("click", () => {
  errorModal.classList.add("hidden");
  setTimeout(showNextError, 200);
});

endGameBtn.addEventListener("click", () => {
  errorModal.classList.add("hidden");
  showErrorsContainer.classList.add("hidden");
});
